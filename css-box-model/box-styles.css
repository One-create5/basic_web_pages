/*
 * Everything is a box. 
 * Boxes can be inline or block-level. 
 * Boxes have content, padding, borders, and margins. 
 * They also have seemingly arbitrary rules about how they interact. 
 * Mastering the CSS box model means you can lay out most web pages.
 */

* {
    /*It’s usually a good idea to override default 
    styles to a predictable value using the “universal” 
    CSS selector (*).*/

    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

h1, p {
    background-color: #DDE0E3; /* Light gray*/
}

em, strong {
    background-color: #B2D6FF; /* Light blue*/
    display: inline; /* This is the default for em and strong */
}

h1 {
    padding: 50px;
    border-bottom: 1px solid #5D6063; 
}

p{
    /* padding: 20px 10px; /* Vertical Horizontal */
    padding: 20px 0 20px 10px; /* Top Right Bottom Left */
    margin-top: 25px;
    margin-bottom: 50px;
}

strong{
    /*padding: 50px;  Do not do this to inline element. If you want
                      to play with the vertical space of a page, you MUST
                      be working with block-level elements! */
    margin: 50px;                
}

div{
    color: #FFF;
  background-color: #5995DA;
  font-weight: bold;
  padding: 20px;
  text-align: center;
  border: 2px solid #5D6063;
  border-radius: 5px;
  
  width: 200px;
  box-sizing: border-box;

  margin: 20px auto; /* Vertical Horizontal */
  /* Note that this only works on blocks that 
  have an explicit width defined on them. Remove 
  that width: 200px line, and our button will be 
  the full width of the browser, making “center 
  alignment” meaningless.*/
}

